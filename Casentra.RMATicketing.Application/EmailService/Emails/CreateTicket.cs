// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Casentra.RMATicketing.EmailService.Emails
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "E:\UpWork\Ticketing\NewWA\Casentra.RMATicketing.Application\EmailService\Emails\CreateTicket.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class CreateTicket : CreateTicketBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org" +
                    "/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n<html xmlns=\"http://www.w3.org/1999/xh" +
                    "tml\">\r\n<head>\r\n    <title>Ticket Creation Email</title>\r\n</head>\r\n<body>\r\n\t\r\n\t<p" +
                    "><b>Bonjour,</b></p>\r\n\t<p>\r\n\t Veuillez nous retourner le bon de retour ci-joint " +
                    "dûment complété, accompagné de votre téléphone dans son emballage d\'origine acco" +
                    "mpagné de tous ses accessoires indiqués lors de l’enregistrement de votre produi" +
                    "t à l’adresse indiquée dans le bon de retour : \r\n\t</p>\r\n\t\r\n\t<p> \r\n\t<b>N\'oubliez " +
                    "pas : </b><br/>\r\n\t <p>\r\n\t\t1- D\'indiquer le numéro IMEI de votre produit(que vous" +
                    " trouverez au dos du téléphone ou au dos de l’emballage), le numéro de votre com" +
                    "mandeet d\'indiquer votre adresse mail, votre adresse postale ainsi que votre num" +
                    "éro de téléphone.\r\n\t </p>\r\n\t<p>\r\n\t\t2- De décrire le problème rencontré et de dés" +
                    "activer votre code PIN ou tout verrouillage de votre smartphone. La présence d\'u" +
                    "n compte icloud verrouille systématiquement les paramètres de votre iPhone et em" +
                    "pêche de cefait, de traiter les pannes de mises à jour, de logiciel, de wifi ou " +
                    "de réseau. Pour cette raison, nous vous demandons de le supprimer avant envoi.\r\n" +
                    "\t </p>\r\n\t <p>\r\n\t\t3- De désactiver votre code icloud ainsi que tout code de verro" +
                    "uillage pouvant bloquer votre téléphone. Vous pouvez désactiver votre compte icl" +
                    "oud directement depuis votre pc via le site icloud.com. Tout compte iCloud et ve" +
                    "rrouillage empêche le test post réparation du téléphone.\r\n\t </p>\r\n\t  <p>\r\n\t\t<b s" +
                    "tyle=\'color:RED;text-align:jutify;\'>\r\n\t\t <p> TOUT TELEPHONE ENVOYE AVEC UN COMPT" +
                    "E ICLOUD NE SERA PAS REPARABLE OU TESTE SUITE A LA REPARATION. MERCI DE DEVERROU" +
                    "ILLER VOTRE COMPTE ICLOUD OU CODE PIN. </p>\r\n\t\t <p> SI VOUS NE POUVEZ LE DESACTI" +
                    "VER, MERCI D4INDIQUER LE COMPTE ET MOT DE PASSE ASSOCIE DANS LE FORMULAIRE DE RE" +
                    "TOUR. </p>\r\n\t\t</b>\r\n\t </p>\r\n\t<p>\r\n\t\t4- De bien protéger votre produit durant l\'e" +
                    "nvoi. Nous ne pourrons être tenu comme responsables pour la réception de produit" +
                    "s cassés. Les produits reçus cassés ne seront pas pris en charge ou suite à l’ac" +
                    "ceptation d’un devis.\r\n\t </p>\r\n\t <p>\r\n\t\t5- De joindre votre fiche de suivis dûme" +
                    "nt remplie à votre colis. Tout produit reçu sans fiche de suivis sera refusé. \r\n" +
                    "\t </p>\r\n\r\n\t <p>\r\n\t <b>Votre produit : </b><br/>\r\n\t  <p style=\'padding-left:20px;" +
                    ">\r\n\r\n\t     <p>1-\tSera traité sous 7 jours à 1mois pour les iPhone d\'occasions. L" +
                    "e technicien en charge de vos réparations ne vous contactera qu\'en cas de besoin" +
                    ".</p>\r\n\t\t\r\n\t\t <p>2-  Sera échangé contre un modèle équivalent, uniquement en cas" +
                    " de panne irréparable.</p>\r\n\t\t\r\n\t\t <p> &nbsp;&nbsp;- La carte Sim n\'est pas néce" +
                    "ssaire. Pensez à bien protéger votre iPhone. Je vous invite aussi à scotcher le " +
                    "couvercle de votre boîtier avec sa base afin qu\'il ne s\'ouvre pas durant le tran" +
                    "sport. </p>\r\n\t\t \r\n\t\t <p> &nbsp;&nbsp;- De même, notre atelier ne s\'occupant que " +
                    "de la réparation et non de la vente de téléphones, nous ne disposons pas de stoc" +
                    "k permettant le prêt d\'un téléphone de courtoisie. </p>\r\n\t\r\n\t\t <p> &nbsp;&nbsp;-" +
                    " Votre numéro de retour vous sera communiqué directement par colissimo. Votre nu" +
                    "méro de portable ainsi que votre adresse mail doivent donc figurer sur votre fic" +
                    "he de retour. </p>\r\n\t\t \r\n\t\t <p> &nbsp;&nbsp;- Les frais de retour restent à votr" +
                    "e charge. </p>\r\n\r\n\t  </p>\r\n\t </p>\r\n\r\n\t</p>\r\n\t<p>Note : ");
            
            #line 58 "E:\UpWork\Ticketing\NewWA\Casentra.RMATicketing.Application\EmailService\Emails\CreateTicket.tt"
 Write(Note); 
            
            #line default
            #line hidden
            this.Write(",</p>\r\n\t\r\n\t<br/>\r\n\t<p>Cordialement</p>\r\n\t\r\n    <p>L’équipe SUIVI-RMA</p>\r\n\t\r\n</bo" +
                    "dy>\r\n</html>");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class CreateTicketBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
